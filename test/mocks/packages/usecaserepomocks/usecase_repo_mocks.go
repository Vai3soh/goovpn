// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/usecase/interfaces.go

// Package usecaserepomocks is a generated GoMock package.
package usecaserepomocks

import (
	fs "io/fs"
	os "os"
	reflect "reflect"

	entity "github.com/Vai3soh/goovpn/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionSetters is a mock of SessionSetters interface.
type MockSessionSetters struct {
	ctrl     *gomock.Controller
	recorder *MockSessionSettersMockRecorder
}

// MockSessionSettersMockRecorder is the mock recorder for MockSessionSetters.
type MockSessionSettersMockRecorder struct {
	mock *MockSessionSetters
}

// NewMockSessionSetters creates a new mock instance.
func NewMockSessionSetters(ctrl *gomock.Controller) *MockSessionSetters {
	mock := &MockSessionSetters{ctrl: ctrl}
	mock.recorder = &MockSessionSettersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionSetters) EXPECT() *MockSessionSettersMockRecorder {
	return m.recorder
}

// SetConfig mocks base method.
func (m *MockSessionSetters) SetConfig(config string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfig", config)
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockSessionSettersMockRecorder) SetConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockSessionSetters)(nil).SetConfig), config)
}

// SetCread mocks base method.
func (m *MockSessionSetters) SetCread(u, p string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCread", u, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCread indicates an expected call of SetCread.
func (mr *MockSessionSettersMockRecorder) SetCread(u, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCread", reflect.TypeOf((*MockSessionSetters)(nil).SetCread), u, p)
}

// MockSessionLoger is a mock of SessionLoger interface.
type MockSessionLoger struct {
	ctrl     *gomock.Controller
	recorder *MockSessionLogerMockRecorder
}

// MockSessionLogerMockRecorder is the mock recorder for MockSessionLoger.
type MockSessionLogerMockRecorder struct {
	mock *MockSessionLoger
}

// NewMockSessionLoger creates a new mock instance.
func NewMockSessionLoger(ctrl *gomock.Controller) *MockSessionLoger {
	mock := &MockSessionLoger{ctrl: ctrl}
	mock.recorder = &MockSessionLogerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionLoger) EXPECT() *MockSessionLogerMockRecorder {
	return m.recorder
}

// ChanVpnLog mocks base method.
func (m *MockSessionLoger) ChanVpnLog() chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChanVpnLog")
	ret0, _ := ret[0].(chan string)
	return ret0
}

// ChanVpnLog indicates an expected call of ChanVpnLog.
func (mr *MockSessionLogerMockRecorder) ChanVpnLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChanVpnLog", reflect.TypeOf((*MockSessionLoger)(nil).ChanVpnLog))
}

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// DestroyClient mocks base method.
func (m *MockSessionManager) DestroyClient() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DestroyClient")
}

// DestroyClient indicates an expected call of DestroyClient.
func (mr *MockSessionManagerMockRecorder) DestroyClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyClient", reflect.TypeOf((*MockSessionManager)(nil).DestroyClient))
}

// StartSession mocks base method.
func (m *MockSessionManager) StartSession() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSession indicates an expected call of StartSession.
func (mr *MockSessionManagerMockRecorder) StartSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockSessionManager)(nil).StartSession))
}

// StopSession mocks base method.
func (m *MockSessionManager) StopSession() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopSession")
}

// StopSession indicates an expected call of StopSession.
func (mr *MockSessionManagerMockRecorder) StopSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSession", reflect.TypeOf((*MockSessionManager)(nil).StopSession))
}

// MockConfigSetters is a mock of ConfigSetters interface.
type MockConfigSetters struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSettersMockRecorder
}

// MockConfigSettersMockRecorder is the mock recorder for MockConfigSetters.
type MockConfigSettersMockRecorder struct {
	mock *MockConfigSetters
}

// NewMockConfigSetters creates a new mock instance.
func NewMockConfigSetters(ctrl *gomock.Controller) *MockConfigSetters {
	mock := &MockConfigSetters{ctrl: ctrl}
	mock.recorder = &MockConfigSettersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigSetters) EXPECT() *MockConfigSettersMockRecorder {
	return m.recorder
}

// SetBody mocks base method.
func (m *MockConfigSetters) SetBody(body string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBody", body)
}

// SetBody indicates an expected call of SetBody.
func (mr *MockConfigSettersMockRecorder) SetBody(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBody", reflect.TypeOf((*MockConfigSetters)(nil).SetBody), body)
}

// SetPath mocks base method.
func (m *MockConfigSetters) SetPath(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPath", path)
}

// SetPath indicates an expected call of SetPath.
func (mr *MockConfigSettersMockRecorder) SetPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockConfigSetters)(nil).SetPath), path)
}

// MockConfigBody is a mock of ConfigBody interface.
type MockConfigBody struct {
	ctrl     *gomock.Controller
	recorder *MockConfigBodyMockRecorder
}

// MockConfigBodyMockRecorder is the mock recorder for MockConfigBody.
type MockConfigBodyMockRecorder struct {
	mock *MockConfigBody
}

// NewMockConfigBody creates a new mock instance.
func NewMockConfigBody(ctrl *gomock.Controller) *MockConfigBody {
	mock := &MockConfigBody{ctrl: ctrl}
	mock.recorder = &MockConfigBodyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigBody) EXPECT() *MockConfigBodyMockRecorder {
	return m.recorder
}

// GetBody mocks base method.
func (m *MockConfigBody) GetBody() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockConfigBodyMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockConfigBody)(nil).GetBody))
}

// MockConfigRemover is a mock of ConfigRemover interface.
type MockConfigRemover struct {
	ctrl     *gomock.Controller
	recorder *MockConfigRemoverMockRecorder
}

// MockConfigRemoverMockRecorder is the mock recorder for MockConfigRemover.
type MockConfigRemoverMockRecorder struct {
	mock *MockConfigRemover
}

// NewMockConfigRemover creates a new mock instance.
func NewMockConfigRemover(ctrl *gomock.Controller) *MockConfigRemover {
	mock := &MockConfigRemover{ctrl: ctrl}
	mock.recorder = &MockConfigRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigRemover) EXPECT() *MockConfigRemoverMockRecorder {
	return m.recorder
}

// RemoveCertsAndKeys mocks base method.
func (m *MockConfigRemover) RemoveCertsAndKeys() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCertsAndKeys")
}

// RemoveCertsAndKeys indicates an expected call of RemoveCertsAndKeys.
func (mr *MockConfigRemoverMockRecorder) RemoveCertsAndKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCertsAndKeys", reflect.TypeOf((*MockConfigRemover)(nil).RemoveCertsAndKeys))
}

// RemoveCommentLines mocks base method.
func (m *MockConfigRemover) RemoveCommentLines() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCommentLines")
}

// RemoveCommentLines indicates an expected call of RemoveCommentLines.
func (mr *MockConfigRemoverMockRecorder) RemoveCommentLines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCommentLines", reflect.TypeOf((*MockConfigRemover)(nil).RemoveCommentLines))
}

// RemoveEmptyString mocks base method.
func (m *MockConfigRemover) RemoveEmptyString() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveEmptyString")
}

// RemoveEmptyString indicates an expected call of RemoveEmptyString.
func (mr *MockConfigRemoverMockRecorder) RemoveEmptyString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEmptyString", reflect.TypeOf((*MockConfigRemover)(nil).RemoveEmptyString))
}

// RemoveNotCertsAndKeys mocks base method.
func (m *MockConfigRemover) RemoveNotCertsAndKeys() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveNotCertsAndKeys")
}

// RemoveNotCertsAndKeys indicates an expected call of RemoveNotCertsAndKeys.
func (mr *MockConfigRemoverMockRecorder) RemoveNotCertsAndKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotCertsAndKeys", reflect.TypeOf((*MockConfigRemover)(nil).RemoveNotCertsAndKeys))
}

// RemoveSpaceLines mocks base method.
func (m *MockConfigRemover) RemoveSpaceLines() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveSpaceLines")
}

// RemoveSpaceLines indicates an expected call of RemoveSpaceLines.
func (mr *MockConfigRemoverMockRecorder) RemoveSpaceLines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSpaceLines", reflect.TypeOf((*MockConfigRemover)(nil).RemoveSpaceLines))
}

// MockConfigChecker is a mock of ConfigChecker interface.
type MockConfigChecker struct {
	ctrl     *gomock.Controller
	recorder *MockConfigCheckerMockRecorder
}

// MockConfigCheckerMockRecorder is the mock recorder for MockConfigChecker.
type MockConfigCheckerMockRecorder struct {
	mock *MockConfigChecker
}

// NewMockConfigChecker creates a new mock instance.
func NewMockConfigChecker(ctrl *gomock.Controller) *MockConfigChecker {
	mock := &MockConfigChecker{ctrl: ctrl}
	mock.recorder = &MockConfigCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigChecker) EXPECT() *MockConfigCheckerMockRecorder {
	return m.recorder
}

// CheckConfigUseFiles mocks base method.
func (m *MockConfigChecker) CheckConfigUseFiles() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConfigUseFiles")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckConfigUseFiles indicates an expected call of CheckConfigUseFiles.
func (mr *MockConfigCheckerMockRecorder) CheckConfigUseFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConfigUseFiles", reflect.TypeOf((*MockConfigChecker)(nil).CheckConfigUseFiles))
}

// CheckStringAuthUserPass mocks base method.
func (m *MockConfigChecker) CheckStringAuthUserPass() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStringAuthUserPass")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckStringAuthUserPass indicates an expected call of CheckStringAuthUserPass.
func (mr *MockConfigCheckerMockRecorder) CheckStringAuthUserPass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStringAuthUserPass", reflect.TypeOf((*MockConfigChecker)(nil).CheckStringAuthUserPass))
}

// MockConfigMerger is a mock of ConfigMerger interface.
type MockConfigMerger struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMergerMockRecorder
}

// MockConfigMergerMockRecorder is the mock recorder for MockConfigMerger.
type MockConfigMergerMockRecorder struct {
	mock *MockConfigMerger
}

// NewMockConfigMerger creates a new mock instance.
func NewMockConfigMerger(ctrl *gomock.Controller) *MockConfigMerger {
	mock := &MockConfigMerger{ctrl: ctrl}
	mock.recorder = &MockConfigMergerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigMerger) EXPECT() *MockConfigMergerMockRecorder {
	return m.recorder
}

// MergeCertsAndKeys mocks base method.
func (m *MockConfigMerger) MergeCertsAndKeys(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeCertsAndKeys", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// MergeCertsAndKeys indicates an expected call of MergeCertsAndKeys.
func (mr *MockConfigMergerMockRecorder) MergeCertsAndKeys(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeCertsAndKeys", reflect.TypeOf((*MockConfigMerger)(nil).MergeCertsAndKeys), key)
}

// MockConfigTools is a mock of ConfigTools interface.
type MockConfigTools struct {
	ctrl     *gomock.Controller
	recorder *MockConfigToolsMockRecorder
}

// MockConfigToolsMockRecorder is the mock recorder for MockConfigTools.
type MockConfigToolsMockRecorder struct {
	mock *MockConfigTools
}

// NewMockConfigTools creates a new mock instance.
func NewMockConfigTools(ctrl *gomock.Controller) *MockConfigTools {
	mock := &MockConfigTools{ctrl: ctrl}
	mock.recorder = &MockConfigToolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigTools) EXPECT() *MockConfigToolsMockRecorder {
	return m.recorder
}

// AddStringToConfig mocks base method.
func (m *MockConfigTools) AddStringToConfig(inFile *os.File) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStringToConfig", inFile)
	ret0, _ := ret[0].(string)
	return ret0
}

// AddStringToConfig indicates an expected call of AddStringToConfig.
func (mr *MockConfigToolsMockRecorder) AddStringToConfig(inFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStringToConfig", reflect.TypeOf((*MockConfigTools)(nil).AddStringToConfig), inFile)
}

// GetAuthpathFileName mocks base method.
func (m *MockConfigTools) GetAuthpathFileName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthpathFileName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthpathFileName indicates an expected call of GetAuthpathFileName.
func (mr *MockConfigToolsMockRecorder) GetAuthpathFileName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthpathFileName", reflect.TypeOf((*MockConfigTools)(nil).GetAuthpathFileName))
}

// GetUserAndPass mocks base method.
func (m *MockConfigTools) GetUserAndPass() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAndPass")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetUserAndPass indicates an expected call of GetUserAndPass.
func (mr *MockConfigToolsMockRecorder) GetUserAndPass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAndPass", reflect.TypeOf((*MockConfigTools)(nil).GetUserAndPass))
}

// SearchFilesPaths mocks base method.
func (m *MockConfigTools) SearchFilesPaths() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilesPaths")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// SearchFilesPaths indicates an expected call of SearchFilesPaths.
func (mr *MockConfigToolsMockRecorder) SearchFilesPaths() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilesPaths", reflect.TypeOf((*MockConfigTools)(nil).SearchFilesPaths))
}

// MockFileSetters is a mock of FileSetters interface.
type MockFileSetters struct {
	ctrl     *gomock.Controller
	recorder *MockFileSettersMockRecorder
}

// MockFileSettersMockRecorder is the mock recorder for MockFileSetters.
type MockFileSettersMockRecorder struct {
	mock *MockFileSetters
}

// NewMockFileSetters creates a new mock instance.
func NewMockFileSetters(ctrl *gomock.Controller) *MockFileSetters {
	mock := &MockFileSetters{ctrl: ctrl}
	mock.recorder = &MockFileSettersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSetters) EXPECT() *MockFileSettersMockRecorder {
	return m.recorder
}

// SetBody mocks base method.
func (m *MockFileSetters) SetBody(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBody", arg0)
}

// SetBody indicates an expected call of SetBody.
func (mr *MockFileSettersMockRecorder) SetBody(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBody", reflect.TypeOf((*MockFileSetters)(nil).SetBody), arg0)
}

// SetDestPath mocks base method.
func (m *MockFileSetters) SetDestPath(destPath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDestPath", destPath)
}

// SetDestPath indicates an expected call of SetDestPath.
func (mr *MockFileSettersMockRecorder) SetDestPath(destPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDestPath", reflect.TypeOf((*MockFileSetters)(nil).SetDestPath), destPath)
}

// SetPath mocks base method.
func (m *MockFileSetters) SetPath(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPath", path)
}

// SetPath indicates an expected call of SetPath.
func (mr *MockFileSettersMockRecorder) SetPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockFileSetters)(nil).SetPath), path)
}

// MockFileGetters is a mock of FileGetters interface.
type MockFileGetters struct {
	ctrl     *gomock.Controller
	recorder *MockFileGettersMockRecorder
}

// MockFileGettersMockRecorder is the mock recorder for MockFileGetters.
type MockFileGettersMockRecorder struct {
	mock *MockFileGetters
}

// NewMockFileGetters creates a new mock instance.
func NewMockFileGetters(ctrl *gomock.Controller) *MockFileGetters {
	mock := &MockFileGetters{ctrl: ctrl}
	mock.recorder = &MockFileGettersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileGetters) EXPECT() *MockFileGettersMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockFileGetters) Body() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockFileGettersMockRecorder) Body() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockFileGetters)(nil).Body))
}

// Path mocks base method.
func (m *MockFileGetters) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockFileGettersMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockFileGetters)(nil).Path))
}

// MockFileReader is a mock of FileReader interface.
type MockFileReader struct {
	ctrl     *gomock.Controller
	recorder *MockFileReaderMockRecorder
}

// MockFileReaderMockRecorder is the mock recorder for MockFileReader.
type MockFileReaderMockRecorder struct {
	mock *MockFileReader
}

// NewMockFileReader creates a new mock instance.
func NewMockFileReader(ctrl *gomock.Controller) *MockFileReader {
	mock := &MockFileReader{ctrl: ctrl}
	mock.recorder = &MockFileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileReader) EXPECT() *MockFileReaderMockRecorder {
	return m.recorder
}

// ReadFileAsByte mocks base method.
func (m *MockFileReader) ReadFileAsByte() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFileAsByte")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFileAsByte indicates an expected call of ReadFileAsByte.
func (mr *MockFileReaderMockRecorder) ReadFileAsByte() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFileAsByte", reflect.TypeOf((*MockFileReader)(nil).ReadFileAsByte))
}

// ReadFileAsString mocks base method.
func (m *MockFileReader) ReadFileAsString() (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFileAsString")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFileAsString indicates an expected call of ReadFileAsString.
func (mr *MockFileReaderMockRecorder) ReadFileAsString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFileAsString", reflect.TypeOf((*MockFileReader)(nil).ReadFileAsString))
}

// MockFileWriter is a mock of FileWriter interface.
type MockFileWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFileWriterMockRecorder
}

// MockFileWriterMockRecorder is the mock recorder for MockFileWriter.
type MockFileWriterMockRecorder struct {
	mock *MockFileWriter
}

// NewMockFileWriter creates a new mock instance.
func NewMockFileWriter(ctrl *gomock.Controller) *MockFileWriter {
	mock := &MockFileWriter{ctrl: ctrl}
	mock.recorder = &MockFileWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileWriter) EXPECT() *MockFileWriterMockRecorder {
	return m.recorder
}

// WriteByteFile mocks base method.
func (m *MockFileWriter) WriteByteFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteByteFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteByteFile indicates an expected call of WriteByteFile.
func (mr *MockFileWriterMockRecorder) WriteByteFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByteFile", reflect.TypeOf((*MockFileWriter)(nil).WriteByteFile))
}

// WriteStringToFile mocks base method.
func (m *MockFileWriter) WriteStringToFile(file *os.File, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteStringToFile", file, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteStringToFile indicates an expected call of WriteStringToFile.
func (mr *MockFileWriterMockRecorder) WriteStringToFile(file, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStringToFile", reflect.TypeOf((*MockFileWriter)(nil).WriteStringToFile), file, data)
}

// MockFileToolsManager is a mock of FileToolsManager interface.
type MockFileToolsManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileToolsManagerMockRecorder
}

// MockFileToolsManagerMockRecorder is the mock recorder for MockFileToolsManager.
type MockFileToolsManagerMockRecorder struct {
	mock *MockFileToolsManager
}

// NewMockFileToolsManager creates a new mock instance.
func NewMockFileToolsManager(ctrl *gomock.Controller) *MockFileToolsManager {
	mock := &MockFileToolsManager{ctrl: ctrl}
	mock.recorder = &MockFileToolsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileToolsManager) EXPECT() *MockFileToolsManagerMockRecorder {
	return m.recorder
}

// AbsolutePath mocks base method.
func (m *MockFileToolsManager) AbsolutePath() (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbsolutePath")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbsolutePath indicates an expected call of AbsolutePath.
func (mr *MockFileToolsManagerMockRecorder) AbsolutePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbsolutePath", reflect.TypeOf((*MockFileToolsManager)(nil).AbsolutePath))
}

// CheckFileExists mocks base method.
func (m *MockFileToolsManager) CheckFileExists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFileExists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckFileExists indicates an expected call of CheckFileExists.
func (mr *MockFileToolsManagerMockRecorder) CheckFileExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFileExists", reflect.TypeOf((*MockFileToolsManager)(nil).CheckFileExists))
}

// CopyFile mocks base method.
func (m *MockFileToolsManager) CopyFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile.
func (mr *MockFileToolsManagerMockRecorder) CopyFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockFileToolsManager)(nil).CopyFile))
}

// CreateFile mocks base method.
func (m *MockFileToolsManager) CreateFile() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileToolsManagerMockRecorder) CreateFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileToolsManager)(nil).CreateFile))
}

// FileNameWithoutExtension mocks base method.
func (m *MockFileToolsManager) FileNameWithoutExtension() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileNameWithoutExtension")
	ret0, _ := ret[0].(*string)
	return ret0
}

// FileNameWithoutExtension indicates an expected call of FileNameWithoutExtension.
func (mr *MockFileToolsManagerMockRecorder) FileNameWithoutExtension() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileNameWithoutExtension", reflect.TypeOf((*MockFileToolsManager)(nil).FileNameWithoutExtension))
}

// FileOpen mocks base method.
func (m *MockFileToolsManager) FileOpen() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileOpen")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileOpen indicates an expected call of FileOpen.
func (mr *MockFileToolsManagerMockRecorder) FileOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileOpen", reflect.TypeOf((*MockFileToolsManager)(nil).FileOpen))
}

// SetPermissonFile mocks base method.
func (m *MockFileToolsManager) SetPermissonFile(arg0 fs.FileMode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPermissonFile", arg0)
}

// SetPermissonFile indicates an expected call of SetPermissonFile.
func (mr *MockFileToolsManagerMockRecorder) SetPermissonFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPermissonFile", reflect.TypeOf((*MockFileToolsManager)(nil).SetPermissonFile), arg0)
}

// MockDnsSetters is a mock of DnsSetters interface.
type MockDnsSetters struct {
	ctrl     *gomock.Controller
	recorder *MockDnsSettersMockRecorder
}

// MockDnsSettersMockRecorder is the mock recorder for MockDnsSetters.
type MockDnsSettersMockRecorder struct {
	mock *MockDnsSetters
}

// NewMockDnsSetters creates a new mock instance.
func NewMockDnsSetters(ctrl *gomock.Controller) *MockDnsSetters {
	mock := &MockDnsSetters{ctrl: ctrl}
	mock.recorder = &MockDnsSettersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDnsSetters) EXPECT() *MockDnsSettersMockRecorder {
	return m.recorder
}

// SetInterface mocks base method.
func (m *MockDnsSetters) SetInterface(iface string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInterface", iface)
}

// SetInterface indicates an expected call of SetInterface.
func (mr *MockDnsSettersMockRecorder) SetInterface(iface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInterface", reflect.TypeOf((*MockDnsSetters)(nil).SetInterface), iface)
}

// MockProfileRepository is a mock of ProfileRepository interface.
type MockProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProfileRepositoryMockRecorder
}

// MockProfileRepositoryMockRecorder is the mock recorder for MockProfileRepository.
type MockProfileRepositoryMockRecorder struct {
	mock *MockProfileRepository
}

// NewMockProfileRepository creates a new mock instance.
func NewMockProfileRepository(ctrl *gomock.Controller) *MockProfileRepository {
	mock := &MockProfileRepository{ctrl: ctrl}
	mock.recorder = &MockProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileRepository) EXPECT() *MockProfileRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockProfileRepository) Find(key string) entity.Profile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", key)
	ret0, _ := ret[0].(entity.Profile)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockProfileRepositoryMockRecorder) Find(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockProfileRepository)(nil).Find), key)
}

// Store mocks base method.
func (m *MockProfileRepository) Store(p entity.Profile) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", p)
}

// Store indicates an expected call of Store.
func (mr *MockProfileRepositoryMockRecorder) Store(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockProfileRepository)(nil).Store), p)
}
