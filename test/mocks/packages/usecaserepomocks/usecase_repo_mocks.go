// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/usecase/interfaces.go

// Package usecaserepomocks is a generated GoMock package.
package usecaserepomocks

import (
	fs "io/fs"
	os "os"
	exec "os/exec"
	reflect "reflect"

	entity "github.com/Vai3soh/goovpn/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockLoggerInteractor is a mock of LoggerInteractor interface.
type MockLoggerInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerInteractorMockRecorder
}

// MockLoggerInteractorMockRecorder is the mock recorder for MockLoggerInteractor.
type MockLoggerInteractorMockRecorder struct {
	mock *MockLoggerInteractor
}

// NewMockLoggerInteractor creates a new mock instance.
func NewMockLoggerInteractor(ctrl *gomock.Controller) *MockLoggerInteractor {
	mock := &MockLoggerInteractor{ctrl: ctrl}
	mock.recorder = &MockLoggerInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerInteractor) EXPECT() *MockLoggerInteractorMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLoggerInteractor) Debugf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerInteractorMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLoggerInteractor)(nil).Debugf), varargs...)
}

// Fatal mocks base method.
func (m *MockLoggerInteractor) Fatal(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerInteractorMockRecorder) Fatal(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLoggerInteractor)(nil).Fatal), arg0...)
}

// Fatalf mocks base method.
func (m *MockLoggerInteractor) Fatalf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockLoggerInteractorMockRecorder) Fatalf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLoggerInteractor)(nil).Fatalf), varargs...)
}

// MockManagerInteractor is a mock of ManagerInteractor interface.
type MockManagerInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockManagerInteractorMockRecorder
}

// MockManagerInteractorMockRecorder is the mock recorder for MockManagerInteractor.
type MockManagerInteractorMockRecorder struct {
	mock *MockManagerInteractor
}

// NewMockManagerInteractor creates a new mock instance.
func NewMockManagerInteractor(ctrl *gomock.Controller) *MockManagerInteractor {
	mock := &MockManagerInteractor{ctrl: ctrl}
	mock.recorder = &MockManagerInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerInteractor) EXPECT() *MockManagerInteractorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockManagerInteractor) Connect(ConfigsPath, Level string, StopTimeout int, UseSystemd bool) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ConfigsPath, Level, StopTimeout, UseSystemd)
	ret0, _ := ret[0].(func())
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockManagerInteractorMockRecorder) Connect(ConfigsPath, Level, StopTimeout, UseSystemd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockManagerInteractor)(nil).Connect), ConfigsPath, Level, StopTimeout, UseSystemd)
}

// Disconnect mocks base method.
func (m *MockManagerInteractor) Disconnect(StopTimeout int, UseSystemd bool) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", StopTimeout, UseSystemd)
	ret0, _ := ret[0].(func())
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockManagerInteractorMockRecorder) Disconnect(StopTimeout, UseSystemd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockManagerInteractor)(nil).Disconnect), StopTimeout, UseSystemd)
}

// MockGlueConfigInteractor is a mock of GlueConfigInteractor interface.
type MockGlueConfigInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockGlueConfigInteractorMockRecorder
}

// MockGlueConfigInteractorMockRecorder is the mock recorder for MockGlueConfigInteractor.
type MockGlueConfigInteractorMockRecorder struct {
	mock *MockGlueConfigInteractor
}

// NewMockGlueConfigInteractor creates a new mock instance.
func NewMockGlueConfigInteractor(ctrl *gomock.Controller) *MockGlueConfigInteractor {
	mock := &MockGlueConfigInteractor{ctrl: ctrl}
	mock.recorder = &MockGlueConfigInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlueConfigInteractor) EXPECT() *MockGlueConfigInteractorMockRecorder {
	return m.recorder
}

// AddStringToConfig mocks base method.
func (m *MockGlueConfigInteractor) AddStringToConfig(inFile *os.File) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStringToConfig", inFile)
	ret0, _ := ret[0].(string)
	return ret0
}

// AddStringToConfig indicates an expected call of AddStringToConfig.
func (mr *MockGlueConfigInteractorMockRecorder) AddStringToConfig(inFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStringToConfig", reflect.TypeOf((*MockGlueConfigInteractor)(nil).AddStringToConfig), inFile)
}

// CheckConfigUseFiles mocks base method.
func (m *MockGlueConfigInteractor) CheckConfigUseFiles() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConfigUseFiles")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckConfigUseFiles indicates an expected call of CheckConfigUseFiles.
func (mr *MockGlueConfigInteractorMockRecorder) CheckConfigUseFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConfigUseFiles", reflect.TypeOf((*MockGlueConfigInteractor)(nil).CheckConfigUseFiles))
}

// CheckStringAuthUserPass mocks base method.
func (m *MockGlueConfigInteractor) CheckStringAuthUserPass() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStringAuthUserPass")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckStringAuthUserPass indicates an expected call of CheckStringAuthUserPass.
func (mr *MockGlueConfigInteractorMockRecorder) CheckStringAuthUserPass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStringAuthUserPass", reflect.TypeOf((*MockGlueConfigInteractor)(nil).CheckStringAuthUserPass))
}

// GetAuthpathFileName mocks base method.
func (m *MockGlueConfigInteractor) GetAuthpathFileName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthpathFileName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthpathFileName indicates an expected call of GetAuthpathFileName.
func (mr *MockGlueConfigInteractorMockRecorder) GetAuthpathFileName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthpathFileName", reflect.TypeOf((*MockGlueConfigInteractor)(nil).GetAuthpathFileName))
}

// GetBody mocks base method.
func (m *MockGlueConfigInteractor) GetBody() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockGlueConfigInteractorMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockGlueConfigInteractor)(nil).GetBody))
}

// GetUserAndPass mocks base method.
func (m *MockGlueConfigInteractor) GetUserAndPass() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAndPass")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetUserAndPass indicates an expected call of GetUserAndPass.
func (mr *MockGlueConfigInteractorMockRecorder) GetUserAndPass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAndPass", reflect.TypeOf((*MockGlueConfigInteractor)(nil).GetUserAndPass))
}

// MergeCertsAndKeys mocks base method.
func (m *MockGlueConfigInteractor) MergeCertsAndKeys(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeCertsAndKeys", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// MergeCertsAndKeys indicates an expected call of MergeCertsAndKeys.
func (mr *MockGlueConfigInteractorMockRecorder) MergeCertsAndKeys(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeCertsAndKeys", reflect.TypeOf((*MockGlueConfigInteractor)(nil).MergeCertsAndKeys), key)
}

// RemoveCertsAndKeys mocks base method.
func (m *MockGlueConfigInteractor) RemoveCertsAndKeys() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCertsAndKeys")
}

// RemoveCertsAndKeys indicates an expected call of RemoveCertsAndKeys.
func (mr *MockGlueConfigInteractorMockRecorder) RemoveCertsAndKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCertsAndKeys", reflect.TypeOf((*MockGlueConfigInteractor)(nil).RemoveCertsAndKeys))
}

// RemoveCommentLines mocks base method.
func (m *MockGlueConfigInteractor) RemoveCommentLines() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCommentLines")
}

// RemoveCommentLines indicates an expected call of RemoveCommentLines.
func (mr *MockGlueConfigInteractorMockRecorder) RemoveCommentLines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCommentLines", reflect.TypeOf((*MockGlueConfigInteractor)(nil).RemoveCommentLines))
}

// RemoveEmptyString mocks base method.
func (m *MockGlueConfigInteractor) RemoveEmptyString() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveEmptyString")
}

// RemoveEmptyString indicates an expected call of RemoveEmptyString.
func (mr *MockGlueConfigInteractorMockRecorder) RemoveEmptyString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEmptyString", reflect.TypeOf((*MockGlueConfigInteractor)(nil).RemoveEmptyString))
}

// RemoveNotCertsAndKeys mocks base method.
func (m *MockGlueConfigInteractor) RemoveNotCertsAndKeys() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveNotCertsAndKeys")
}

// RemoveNotCertsAndKeys indicates an expected call of RemoveNotCertsAndKeys.
func (mr *MockGlueConfigInteractorMockRecorder) RemoveNotCertsAndKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotCertsAndKeys", reflect.TypeOf((*MockGlueConfigInteractor)(nil).RemoveNotCertsAndKeys))
}

// RemoveSpaceLines mocks base method.
func (m *MockGlueConfigInteractor) RemoveSpaceLines() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveSpaceLines")
}

// RemoveSpaceLines indicates an expected call of RemoveSpaceLines.
func (mr *MockGlueConfigInteractorMockRecorder) RemoveSpaceLines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSpaceLines", reflect.TypeOf((*MockGlueConfigInteractor)(nil).RemoveSpaceLines))
}

// SearchFilesPaths mocks base method.
func (m *MockGlueConfigInteractor) SearchFilesPaths() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilesPaths")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// SearchFilesPaths indicates an expected call of SearchFilesPaths.
func (mr *MockGlueConfigInteractorMockRecorder) SearchFilesPaths() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilesPaths", reflect.TypeOf((*MockGlueConfigInteractor)(nil).SearchFilesPaths))
}

// SetBody mocks base method.
func (m *MockGlueConfigInteractor) SetBody(body string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBody", body)
}

// SetBody indicates an expected call of SetBody.
func (mr *MockGlueConfigInteractorMockRecorder) SetBody(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBody", reflect.TypeOf((*MockGlueConfigInteractor)(nil).SetBody), body)
}

// SetPath mocks base method.
func (m *MockGlueConfigInteractor) SetPath(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPath", path)
}

// SetPath indicates an expected call of SetPath.
func (mr *MockGlueConfigInteractorMockRecorder) SetPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockGlueConfigInteractor)(nil).SetPath), path)
}

// MockSessionInteractor is a mock of SessionInteractor interface.
type MockSessionInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSessionInteractorMockRecorder
}

// MockSessionInteractorMockRecorder is the mock recorder for MockSessionInteractor.
type MockSessionInteractorMockRecorder struct {
	mock *MockSessionInteractor
}

// NewMockSessionInteractor creates a new mock instance.
func NewMockSessionInteractor(ctrl *gomock.Controller) *MockSessionInteractor {
	mock := &MockSessionInteractor{ctrl: ctrl}
	mock.recorder = &MockSessionInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionInteractor) EXPECT() *MockSessionInteractorMockRecorder {
	return m.recorder
}

// SetConfig mocks base method.
func (m *MockSessionInteractor) SetConfig(config string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfig", config)
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockSessionInteractorMockRecorder) SetConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockSessionInteractor)(nil).SetConfig), config)
}

// SetSession mocks base method.
func (m *MockSessionInteractor) SetSession(username, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSession", username, password)
}

// SetSession indicates an expected call of SetSession.
func (mr *MockSessionInteractorMockRecorder) SetSession(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockSessionInteractor)(nil).SetSession), username, password)
}

// StartSession mocks base method.
func (m *MockSessionInteractor) StartSession() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartSession")
}

// StartSession indicates an expected call of StartSession.
func (mr *MockSessionInteractorMockRecorder) StartSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockSessionInteractor)(nil).StartSession))
}

// StopSession mocks base method.
func (m *MockSessionInteractor) StopSession() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopSession")
}

// StopSession indicates an expected call of StopSession.
func (mr *MockSessionInteractorMockRecorder) StopSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSession", reflect.TypeOf((*MockSessionInteractor)(nil).StopSession))
}

// StopSessionWithTimeout mocks base method.
func (m *MockSessionInteractor) StopSessionWithTimeout(timeout int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopSessionWithTimeout", timeout)
}

// StopSessionWithTimeout indicates an expected call of StopSessionWithTimeout.
func (mr *MockSessionInteractorMockRecorder) StopSessionWithTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSessionWithTimeout", reflect.TypeOf((*MockSessionInteractor)(nil).StopSessionWithTimeout), timeout)
}

// MockCloseAppInteractor is a mock of CloseAppInteractor interface.
type MockCloseAppInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockCloseAppInteractorMockRecorder
}

// MockCloseAppInteractorMockRecorder is the mock recorder for MockCloseAppInteractor.
type MockCloseAppInteractorMockRecorder struct {
	mock *MockCloseAppInteractor
}

// NewMockCloseAppInteractor creates a new mock instance.
func NewMockCloseAppInteractor(ctrl *gomock.Controller) *MockCloseAppInteractor {
	mock := &MockCloseAppInteractor{ctrl: ctrl}
	mock.recorder = &MockCloseAppInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloseAppInteractor) EXPECT() *MockCloseAppInteractorMockRecorder {
	return m.recorder
}

// CloseApp mocks base method.
func (m *MockCloseAppInteractor) CloseApp() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseApp")
}

// CloseApp indicates an expected call of CloseApp.
func (mr *MockCloseAppInteractorMockRecorder) CloseApp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseApp", reflect.TypeOf((*MockCloseAppInteractor)(nil).CloseApp))
}

// SetBind mocks base method.
func (m *MockCloseAppInteractor) SetBind(bind func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBind", bind)
}

// SetBind indicates an expected call of SetBind.
func (mr *MockCloseAppInteractorMockRecorder) SetBind(bind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBind", reflect.TypeOf((*MockCloseAppInteractor)(nil).SetBind), bind)
}

// MockUiInteractor is a mock of UiInteractor interface.
type MockUiInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockUiInteractorMockRecorder
}

// MockUiInteractorMockRecorder is the mock recorder for MockUiInteractor.
type MockUiInteractorMockRecorder struct {
	mock *MockUiInteractor
}

// NewMockUiInteractor creates a new mock instance.
func NewMockUiInteractor(ctrl *gomock.Controller) *MockUiInteractor {
	mock := &MockUiInteractor{ctrl: ctrl}
	mock.recorder = &MockUiInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUiInteractor) EXPECT() *MockUiInteractorMockRecorder {
	return m.recorder
}

// ButtonConnectDisable mocks base method.
func (m *MockUiInteractor) ButtonConnectDisable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ButtonConnectDisable")
}

// ButtonConnectDisable indicates an expected call of ButtonConnectDisable.
func (mr *MockUiInteractorMockRecorder) ButtonConnectDisable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ButtonConnectDisable", reflect.TypeOf((*MockUiInteractor)(nil).ButtonConnectDisable))
}

// ButtonConnectEnable mocks base method.
func (m *MockUiInteractor) ButtonConnectEnable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ButtonConnectEnable")
}

// ButtonConnectEnable indicates an expected call of ButtonConnectEnable.
func (mr *MockUiInteractorMockRecorder) ButtonConnectEnable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ButtonConnectEnable", reflect.TypeOf((*MockUiInteractor)(nil).ButtonConnectEnable))
}

// ButtonDisconnectDisable mocks base method.
func (m *MockUiInteractor) ButtonDisconnectDisable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ButtonDisconnectDisable")
}

// ButtonDisconnectDisable indicates an expected call of ButtonDisconnectDisable.
func (mr *MockUiInteractorMockRecorder) ButtonDisconnectDisable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ButtonDisconnectDisable", reflect.TypeOf((*MockUiInteractor)(nil).ButtonDisconnectDisable))
}

// ButtonDisconnectEnable mocks base method.
func (m *MockUiInteractor) ButtonDisconnectEnable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ButtonDisconnectEnable")
}

// ButtonDisconnectEnable indicates an expected call of ButtonDisconnectEnable.
func (mr *MockUiInteractorMockRecorder) ButtonDisconnectEnable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ButtonDisconnectEnable", reflect.TypeOf((*MockUiInteractor)(nil).ButtonDisconnectEnable))
}

// ChanVpnLog mocks base method.
func (m *MockUiInteractor) ChanVpnLog() chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChanVpnLog")
	ret0, _ := ret[0].(chan string)
	return ret0
}

// ChanVpnLog indicates an expected call of ChanVpnLog.
func (mr *MockUiInteractorMockRecorder) ChanVpnLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChanVpnLog", reflect.TypeOf((*MockUiInteractor)(nil).ChanVpnLog))
}

// ClearTextEdit mocks base method.
func (m *MockUiInteractor) ClearTextEdit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearTextEdit")
}

// ClearTextEdit indicates an expected call of ClearTextEdit.
func (mr *MockUiInteractorMockRecorder) ClearTextEdit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearTextEdit", reflect.TypeOf((*MockUiInteractor)(nil).ClearTextEdit))
}

// CloseChanVpnLog mocks base method.
func (m *MockUiInteractor) CloseChanVpnLog() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseChanVpnLog")
}

// CloseChanVpnLog indicates an expected call of CloseChanVpnLog.
func (mr *MockUiInteractorMockRecorder) CloseChanVpnLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseChanVpnLog", reflect.TypeOf((*MockUiInteractor)(nil).CloseChanVpnLog))
}

// DisableComboBox mocks base method.
func (m *MockUiInteractor) DisableComboBox() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DisableComboBox")
}

// DisableComboBox indicates an expected call of DisableComboBox.
func (mr *MockUiInteractorMockRecorder) DisableComboBox() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableComboBox", reflect.TypeOf((*MockUiInteractor)(nil).DisableComboBox))
}

// EnableComboBox mocks base method.
func (m *MockUiInteractor) EnableComboBox() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableComboBox")
}

// EnableComboBox indicates an expected call of EnableComboBox.
func (mr *MockUiInteractorMockRecorder) EnableComboBox() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableComboBox", reflect.TypeOf((*MockUiInteractor)(nil).EnableComboBox))
}

// GetTextFromTextEdit mocks base method.
func (m *MockUiInteractor) GetTextFromTextEdit() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextFromTextEdit")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTextFromTextEdit indicates an expected call of GetTextFromTextEdit.
func (mr *MockUiInteractorMockRecorder) GetTextFromTextEdit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextFromTextEdit", reflect.TypeOf((*MockUiInteractor)(nil).GetTextFromTextEdit))
}

// Log mocks base method.
func (m *MockUiInteractor) Log(text string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", text)
}

// Log indicates an expected call of Log.
func (mr *MockUiInteractorMockRecorder) Log(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockUiInteractor)(nil).Log), text)
}

// SelectedFromComboBox mocks base method.
func (m *MockUiInteractor) SelectedFromComboBox() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectedFromComboBox")
	ret0, _ := ret[0].(*string)
	return ret0
}

// SelectedFromComboBox indicates an expected call of SelectedFromComboBox.
func (mr *MockUiInteractorMockRecorder) SelectedFromComboBox() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectedFromComboBox", reflect.TypeOf((*MockUiInteractor)(nil).SelectedFromComboBox))
}

// SetTextInTextEdit mocks base method.
func (m *MockUiInteractor) SetTextInTextEdit(text string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTextInTextEdit", text)
}

// SetTextInTextEdit indicates an expected call of SetTextInTextEdit.
func (mr *MockUiInteractorMockRecorder) SetTextInTextEdit(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTextInTextEdit", reflect.TypeOf((*MockUiInteractor)(nil).SetTextInTextEdit), text)
}

// MockSysTrayInteractor is a mock of SysTrayInteractor interface.
type MockSysTrayInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSysTrayInteractorMockRecorder
}

// MockSysTrayInteractorMockRecorder is the mock recorder for MockSysTrayInteractor.
type MockSysTrayInteractorMockRecorder struct {
	mock *MockSysTrayInteractor
}

// NewMockSysTrayInteractor creates a new mock instance.
func NewMockSysTrayInteractor(ctrl *gomock.Controller) *MockSysTrayInteractor {
	mock := &MockSysTrayInteractor{ctrl: ctrl}
	mock.recorder = &MockSysTrayInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysTrayInteractor) EXPECT() *MockSysTrayInteractorMockRecorder {
	return m.recorder
}

// Image mocks base method.
func (m *MockSysTrayInteractor) Image() map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Image")
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// Image indicates an expected call of Image.
func (mr *MockSysTrayInteractorMockRecorder) Image() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Image", reflect.TypeOf((*MockSysTrayInteractor)(nil).Image))
}

// SearchKeyInMap mocks base method.
func (m *MockSysTrayInteractor) SearchKeyInMap(s string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchKeyInMap", s)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchKeyInMap indicates an expected call of SearchKeyInMap.
func (mr *MockSysTrayInteractorMockRecorder) SearchKeyInMap(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchKeyInMap", reflect.TypeOf((*MockSysTrayInteractor)(nil).SearchKeyInMap), s)
}

// SetBlinkIcon mocks base method.
func (m *MockSysTrayInteractor) SetBlinkIcon() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBlinkIcon")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBlinkIcon indicates an expected call of SetBlinkIcon.
func (mr *MockSysTrayInteractorMockRecorder) SetBlinkIcon() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlinkIcon", reflect.TypeOf((*MockSysTrayInteractor)(nil).SetBlinkIcon))
}

// SetConnectIcon mocks base method.
func (m *MockSysTrayInteractor) SetConnectIcon() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConnectIcon")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConnectIcon indicates an expected call of SetConnectIcon.
func (mr *MockSysTrayInteractorMockRecorder) SetConnectIcon() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnectIcon", reflect.TypeOf((*MockSysTrayInteractor)(nil).SetConnectIcon))
}

// SetDisconnectIcon mocks base method.
func (m *MockSysTrayInteractor) SetDisconnectIcon() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDisconnectIcon")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDisconnectIcon indicates an expected call of SetDisconnectIcon.
func (mr *MockSysTrayInteractorMockRecorder) SetDisconnectIcon() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDisconnectIcon", reflect.TypeOf((*MockSysTrayInteractor)(nil).SetDisconnectIcon))
}

// SetIcon mocks base method.
func (m *MockSysTrayInteractor) SetIcon(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIcon", path)
}

// SetIcon indicates an expected call of SetIcon.
func (mr *MockSysTrayInteractorMockRecorder) SetIcon(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIcon", reflect.TypeOf((*MockSysTrayInteractor)(nil).SetIcon), path)
}

// SetOpenIcon mocks base method.
func (m *MockSysTrayInteractor) SetOpenIcon() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOpenIcon")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOpenIcon indicates an expected call of SetOpenIcon.
func (mr *MockSysTrayInteractorMockRecorder) SetOpenIcon() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpenIcon", reflect.TypeOf((*MockSysTrayInteractor)(nil).SetOpenIcon))
}

// MockFileInteractor is a mock of FileInteractor interface.
type MockFileInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockFileInteractorMockRecorder
}

// MockFileInteractorMockRecorder is the mock recorder for MockFileInteractor.
type MockFileInteractorMockRecorder struct {
	mock *MockFileInteractor
}

// NewMockFileInteractor creates a new mock instance.
func NewMockFileInteractor(ctrl *gomock.Controller) *MockFileInteractor {
	mock := &MockFileInteractor{ctrl: ctrl}
	mock.recorder = &MockFileInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileInteractor) EXPECT() *MockFileInteractorMockRecorder {
	return m.recorder
}

// AbsolutePath mocks base method.
func (m *MockFileInteractor) AbsolutePath() (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbsolutePath")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbsolutePath indicates an expected call of AbsolutePath.
func (mr *MockFileInteractorMockRecorder) AbsolutePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbsolutePath", reflect.TypeOf((*MockFileInteractor)(nil).AbsolutePath))
}

// Body mocks base method.
func (m *MockFileInteractor) Body() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockFileInteractorMockRecorder) Body() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockFileInteractor)(nil).Body))
}

// CheckFileExists mocks base method.
func (m *MockFileInteractor) CheckFileExists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFileExists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckFileExists indicates an expected call of CheckFileExists.
func (mr *MockFileInteractorMockRecorder) CheckFileExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFileExists", reflect.TypeOf((*MockFileInteractor)(nil).CheckFileExists))
}

// CopyFile mocks base method.
func (m *MockFileInteractor) CopyFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile.
func (mr *MockFileInteractorMockRecorder) CopyFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockFileInteractor)(nil).CopyFile))
}

// CreateFile mocks base method.
func (m *MockFileInteractor) CreateFile() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileInteractorMockRecorder) CreateFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileInteractor)(nil).CreateFile))
}

// FileNameWithoutExtension mocks base method.
func (m *MockFileInteractor) FileNameWithoutExtension() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileNameWithoutExtension")
	ret0, _ := ret[0].(*string)
	return ret0
}

// FileNameWithoutExtension indicates an expected call of FileNameWithoutExtension.
func (mr *MockFileInteractorMockRecorder) FileNameWithoutExtension() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileNameWithoutExtension", reflect.TypeOf((*MockFileInteractor)(nil).FileNameWithoutExtension))
}

// FileOpen mocks base method.
func (m *MockFileInteractor) FileOpen() (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileOpen")
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileOpen indicates an expected call of FileOpen.
func (mr *MockFileInteractorMockRecorder) FileOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileOpen", reflect.TypeOf((*MockFileInteractor)(nil).FileOpen))
}

// Path mocks base method.
func (m *MockFileInteractor) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockFileInteractorMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockFileInteractor)(nil).Path))
}

// ReadFileAsByte mocks base method.
func (m *MockFileInteractor) ReadFileAsByte() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFileAsByte")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFileAsByte indicates an expected call of ReadFileAsByte.
func (mr *MockFileInteractorMockRecorder) ReadFileAsByte() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFileAsByte", reflect.TypeOf((*MockFileInteractor)(nil).ReadFileAsByte))
}

// ReadFileAsString mocks base method.
func (m *MockFileInteractor) ReadFileAsString() (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFileAsString")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFileAsString indicates an expected call of ReadFileAsString.
func (mr *MockFileInteractorMockRecorder) ReadFileAsString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFileAsString", reflect.TypeOf((*MockFileInteractor)(nil).ReadFileAsString))
}

// SetBody mocks base method.
func (m *MockFileInteractor) SetBody(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBody", arg0)
}

// SetBody indicates an expected call of SetBody.
func (mr *MockFileInteractorMockRecorder) SetBody(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBody", reflect.TypeOf((*MockFileInteractor)(nil).SetBody), arg0)
}

// SetDestPath mocks base method.
func (m *MockFileInteractor) SetDestPath(destPath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDestPath", destPath)
}

// SetDestPath indicates an expected call of SetDestPath.
func (mr *MockFileInteractorMockRecorder) SetDestPath(destPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDestPath", reflect.TypeOf((*MockFileInteractor)(nil).SetDestPath), destPath)
}

// SetPath mocks base method.
func (m *MockFileInteractor) SetPath(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPath", path)
}

// SetPath indicates an expected call of SetPath.
func (mr *MockFileInteractorMockRecorder) SetPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockFileInteractor)(nil).SetPath), path)
}

// SetPermissonFile mocks base method.
func (m *MockFileInteractor) SetPermissonFile(arg0 fs.FileMode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPermissonFile", arg0)
}

// SetPermissonFile indicates an expected call of SetPermissonFile.
func (mr *MockFileInteractorMockRecorder) SetPermissonFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPermissonFile", reflect.TypeOf((*MockFileInteractor)(nil).SetPermissonFile), arg0)
}

// WriteByteFile mocks base method.
func (m *MockFileInteractor) WriteByteFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteByteFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteByteFile indicates an expected call of WriteByteFile.
func (mr *MockFileInteractorMockRecorder) WriteByteFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByteFile", reflect.TypeOf((*MockFileInteractor)(nil).WriteByteFile))
}

// WriteStringToFile mocks base method.
func (m *MockFileInteractor) WriteStringToFile(file *os.File, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteStringToFile", file, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteStringToFile indicates an expected call of WriteStringToFile.
func (mr *MockFileInteractorMockRecorder) WriteStringToFile(file, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStringToFile", reflect.TypeOf((*MockFileInteractor)(nil).WriteStringToFile), file, data)
}

// MockDnsInteractor is a mock of DnsInteractor interface.
type MockDnsInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockDnsInteractorMockRecorder
}

// MockDnsInteractorMockRecorder is the mock recorder for MockDnsInteractor.
type MockDnsInteractorMockRecorder struct {
	mock *MockDnsInteractor
}

// NewMockDnsInteractor creates a new mock instance.
func NewMockDnsInteractor(ctrl *gomock.Controller) *MockDnsInteractor {
	mock := &MockDnsInteractor{ctrl: ctrl}
	mock.recorder = &MockDnsInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDnsInteractor) EXPECT() *MockDnsInteractorMockRecorder {
	return m.recorder
}

// CmdDownResolvConf mocks base method.
func (m *MockDnsInteractor) CmdDownResolvConf() (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdDownResolvConf")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CmdDownResolvConf indicates an expected call of CmdDownResolvConf.
func (mr *MockDnsInteractorMockRecorder) CmdDownResolvConf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDownResolvConf", reflect.TypeOf((*MockDnsInteractor)(nil).CmdDownResolvConf))
}

// CmdResolvConf mocks base method.
func (m *MockDnsInteractor) CmdResolvConf() (*string, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdResolvConf")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CmdResolvConf indicates an expected call of CmdResolvConf.
func (mr *MockDnsInteractorMockRecorder) CmdResolvConf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdResolvConf", reflect.TypeOf((*MockDnsInteractor)(nil).CmdResolvConf))
}

// CmdSystemdResolv mocks base method.
func (m *MockDnsInteractor) CmdSystemdResolv() (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdSystemdResolv")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CmdSystemdResolv indicates an expected call of CmdSystemdResolv.
func (mr *MockDnsInteractorMockRecorder) CmdSystemdResolv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSystemdResolv", reflect.TypeOf((*MockDnsInteractor)(nil).CmdSystemdResolv))
}

// SetAddress mocks base method.
func (m *MockDnsInteractor) SetAddress(addr []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAddress", addr)
}

// SetAddress indicates an expected call of SetAddress.
func (mr *MockDnsInteractorMockRecorder) SetAddress(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddress", reflect.TypeOf((*MockDnsInteractor)(nil).SetAddress), addr)
}

// SetInterface mocks base method.
func (m *MockDnsInteractor) SetInterface(iface string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInterface", iface)
}

// SetInterface indicates an expected call of SetInterface.
func (mr *MockDnsInteractorMockRecorder) SetInterface(iface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInterface", reflect.TypeOf((*MockDnsInteractor)(nil).SetInterface), iface)
}

// MockCommandInteractor is a mock of CommandInteractor interface.
type MockCommandInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockCommandInteractorMockRecorder
}

// MockCommandInteractorMockRecorder is the mock recorder for MockCommandInteractor.
type MockCommandInteractorMockRecorder struct {
	mock *MockCommandInteractor
}

// NewMockCommandInteractor creates a new mock instance.
func NewMockCommandInteractor(ctrl *gomock.Controller) *MockCommandInteractor {
	mock := &MockCommandInteractor{ctrl: ctrl}
	mock.recorder = &MockCommandInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandInteractor) EXPECT() *MockCommandInteractorMockRecorder {
	return m.recorder
}

// PassArgumentsToExec mocks base method.
func (m *MockCommandInteractor) PassArgumentsToExec(arg0 []string) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PassArgumentsToExec", arg0)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// PassArgumentsToExec indicates an expected call of PassArgumentsToExec.
func (mr *MockCommandInteractorMockRecorder) PassArgumentsToExec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PassArgumentsToExec", reflect.TypeOf((*MockCommandInteractor)(nil).PassArgumentsToExec), arg0)
}

// Proc mocks base method.
func (m *MockCommandInteractor) Proc() *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proc")
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Proc indicates an expected call of Proc.
func (mr *MockCommandInteractorMockRecorder) Proc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proc", reflect.TypeOf((*MockCommandInteractor)(nil).Proc))
}

// RunCmdWithPipe mocks base method.
func (m *MockCommandInteractor) RunCmdWithPipe(args1, args2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCmdWithPipe", args1, args2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCmdWithPipe indicates an expected call of RunCmdWithPipe.
func (mr *MockCommandInteractorMockRecorder) RunCmdWithPipe(args1, args2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCmdWithPipe", reflect.TypeOf((*MockCommandInteractor)(nil).RunCmdWithPipe), args1, args2)
}

// SetCommand mocks base method.
func (m *MockCommandInteractor) SetCommand(command string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommand", command)
}

// SetCommand indicates an expected call of SetCommand.
func (mr *MockCommandInteractorMockRecorder) SetCommand(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommand", reflect.TypeOf((*MockCommandInteractor)(nil).SetCommand), command)
}

// SetToProc mocks base method.
func (m *MockCommandInteractor) SetToProc(arg0 *exec.Cmd) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToProc", arg0)
}

// SetToProc indicates an expected call of SetToProc.
func (mr *MockCommandInteractorMockRecorder) SetToProc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToProc", reflect.TypeOf((*MockCommandInteractor)(nil).SetToProc), arg0)
}

// SplitCmd mocks base method.
func (m *MockCommandInteractor) SplitCmd() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitCmd")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SplitCmd indicates an expected call of SplitCmd.
func (mr *MockCommandInteractorMockRecorder) SplitCmd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitCmd", reflect.TypeOf((*MockCommandInteractor)(nil).SplitCmd))
}

// StartProc mocks base method.
func (m *MockCommandInteractor) StartProc() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProc")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartProc indicates an expected call of StartProc.
func (mr *MockCommandInteractorMockRecorder) StartProc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProc", reflect.TypeOf((*MockCommandInteractor)(nil).StartProc))
}

// MockMemoryInteractor is a mock of MemoryInteractor interface.
type MockMemoryInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryInteractorMockRecorder
}

// MockMemoryInteractorMockRecorder is the mock recorder for MockMemoryInteractor.
type MockMemoryInteractorMockRecorder struct {
	mock *MockMemoryInteractor
}

// NewMockMemoryInteractor creates a new mock instance.
func NewMockMemoryInteractor(ctrl *gomock.Controller) *MockMemoryInteractor {
	mock := &MockMemoryInteractor{ctrl: ctrl}
	mock.recorder = &MockMemoryInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryInteractor) EXPECT() *MockMemoryInteractorMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockMemoryInteractor) GetProfile(cfgPath string) entity.Profile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", cfgPath)
	ret0, _ := ret[0].(entity.Profile)
	return ret0
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockMemoryInteractorMockRecorder) GetProfile(cfgPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockMemoryInteractor)(nil).GetProfile), cfgPath)
}

// Save mocks base method.
func (m *MockMemoryInteractor) Save(cfgPath, body string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", cfgPath, body)
}

// Save indicates an expected call of Save.
func (mr *MockMemoryInteractorMockRecorder) Save(cfgPath, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMemoryInteractor)(nil).Save), cfgPath, body)
}
